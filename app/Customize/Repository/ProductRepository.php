<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

//namespace Eccube\Repository;
namespace Customize\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Eccube\Common\EccubeConfig;
use Eccube\Doctrine\Query\Queries;
use Eccube\Entity\Product;
use Eccube\Entity\ProductStock;
use Eccube\Repository\ProductRepository as BaseProductRepository;   // これを忘れないこと
use Eccube\Repository\AbstractRepository;   // これを忘れないこと
use Eccube\Repository\QueryKey;
use Eccube\Util\StringUtil;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Symfony\Component\HttpFoundation\Session\Session;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends BaseProductRepository
{
    /**
     * Find the Product by product_code.
     *
     * @param integer $productId
     *
     * @return Product
     */
    public function findByProductCode($productCode)
    {
        // (HDN) 商品コード指定

        $qb = $this->createQueryBuilder('p');
        $qb->addSelect(['pc', 'cc1', 'cc2', 'pi', 'pt'])
            ->innerJoin('p.ProductClasses', 'pc')
            ->leftJoin('pc.ClassCategory1', 'cc1')
            ->leftJoin('pc.ClassCategory2', 'cc2')
            ->leftJoin('p.ProductImage', 'pi')
            ->leftJoin('p.ProductTag', 'pt')
            ->where('pc.productCode = :productCode')
            ->setParameter('productCode', $productCode)
            ->setParameter('visible', true)
            ->orderBy('cc1.sort_no', 'DESC')
            ->addOrderBy('cc2.sort_no', 'DESC');

        $product = $qb
            ->getQuery()
            ->getSingleResult();

        return $product;
    }
    /**
     * Find the Product with ClassCategory as tenpo.
     *
     * @param integer $productId
     *
     * @return Product
     */
    public function findWithTenpo($productId)
    {
        // (HDN) 指定店舗分を取得する

        $session = new Session();

        $qb = $this->createQueryBuilder('p');
        $qb->addSelect(['pc', 'cc1', 'cc2', 'pi', 'pt'])
            ->innerJoin('p.ProductClasses', 'pc')
            ->leftJoin('pc.ClassCategory1', 'cc1')
            ->leftJoin('pc.ClassCategory2', 'cc2')
            ->leftJoin('p.ProductImage', 'pi')
            ->leftJoin('p.ProductTag', 'pt')
            ->where('p.id = :id')
            ->andWhere('pc.visible = :visible')
            //->andWhere('pc.ClassCategory1 is null or pc.ClassCategory1 = :tenpo_id')
            ->setParameter('id', $productId)
            ->setParameter('visible', true)
            //->setParameter('tenpo_id', $session->get('tenpo_id'))
            ->orderBy('cc1.sort_no', 'DESC')
            ->addOrderBy('cc2.sort_no', 'DESC');

            if ( !$session->has('tenpo_id') ) {
                log_info('セッション無効：店舗ID：'.$session->has('tenpo_id'));
            } else {
                $qb->andWhere('pc.ClassCategory1 is null or pc.ClassCategory1 = :tenpo_id')
                    ->setParameter('tenpo_id', $session->get('tenpo_id'));
            }
    
        $product = $qb
            ->getQuery()
            ->getSingleResult();

        return $product;
    }

    /**
     * Find the Products with TenpoId.
     *
     * @param array $ids Product in ids
     * @param string $indexBy The index for the from.
     * @param string $ClassCategory1 as tenpo_id.
     *
     * @return ArrayCollection|array
     */
    public function findProductsWithTenpo(array $ids, $indexBy = null, $tenpoId)
    {
        // (HDN) 指定店舗分を検索する

        if (count($ids) < 1) {
            return [];
        }
        $qb = $this->createQueryBuilder('p', $indexBy);
        $qb->addSelect(['pc', 'cc1', 'cc2', 'pi', 'pt', 'tr', 'ps'])
            ->innerJoin('p.ProductClasses', 'pc')
            // XXX Joined 'TaxRule' and 'ProductStock' to prevent lazy loading
            ->leftJoin('pc.TaxRule', 'tr')
            ->innerJoin('pc.ProductStock', 'ps')
            ->leftJoin('pc.ClassCategory1', 'cc1')
            ->leftJoin('pc.ClassCategory2', 'cc2')
            ->leftJoin('p.ProductImage', 'pi')
            ->leftJoin('p.ProductTag', 'pt')
            ->where($qb->expr()->in('p.id', $ids))
            ->andWhere('pc.visible = :visible')
            ->andWhere('pc.ClassCategory1 is null or pc.ClassCategory1 = :tenpo_id')
            ->setParameter('visible', true)
            ->setParameter('tenpo_id', $tenpoId)
            ->orderBy('cc1.sort_no', 'DESC')
            ->addOrderBy('cc2.sort_no', 'DESC');

        $products = $qb
            ->getQuery()
            ->useResultCache(true, $this->eccubeConfig['eccube_result_cache_lifetime_short'])
            ->getResult();

        return $products;
    }
    /**
     * Find the Products with SaijiId.
     *
     * @param array $ids Product in ids
     * @param string $indexBy The index for the from.
     * @param string $ClassCategory1 as tenpo_id.
     *
     * @return ArrayCollection|array
     */
    public function findProductsWithSaiji($saijiId)
    {
        // (HDN) 指定催事分を検索する

        // (HDN) 登録ミスの残骸が悪さをするためVisibleのみを対象とした
        /*
        $qb = $this->createQueryBuilder('p');
        $qb->addSelect(['pc', 'cc1', 'pcat'])
            ->innerJoin('p.ProductClasses', 'pc')
            ->innerJoin('p.ProductCategories', 'pcat')
            ->leftJoin('pc.ClassCategory1', 'cc1')
            ->where('pcat.category_id = :saiji_id')
            ->andWhere('pc.ClassCategory1 is null')
            ->setParameter('saiji_id', $saijiId)
            ->orderBy('pc.code');
        */
        $qb = $this->createQueryBuilder('p');
        $qb->select(['pc.code', 'p.name'])
            ->innerJoin('p.ProductClasses', 'pc')
            ->innerJoin('p.ProductCategories', 'pcat')
            ->leftJoin('pc.ClassCategory1', 'cc1')
            ->where('pcat.category_id = :saiji_id')
            ->andWhere('pc.visible = :visible')
            ->setParameter('saiji_id', $saijiId)
            ->setParameter('visible', true)
            ->groupBy('pc.code')
            ->addGroupBy('p.name')
            ->orderBy('pc.code');

        $products = $qb
            ->getQuery()
            ->useResultCache(true, $this->eccubeConfig['eccube_result_cache_lifetime_short'])
            ->getResult();

        return $products;
    }
    /**
     * Find the Products with SaijiId.
     *
     * @param integer $saijiId
     *
     * @return ArrayCollection|array
     */
    public function findProductsWithSaiji2($saijiId, $tenpoId=null)
    {
        // (HDN) 指定催事分を検索する

        // (HDN) 登録ミスの残骸が悪さをするためVisibleのみを対象とした
        /*
        $qb = $this->createQueryBuilder('p');
        $qb->addSelect(['pc', 'cc1', 'pcat'])
            ->innerJoin('p.ProductClasses', 'pc')
            ->innerJoin('p.ProductCategories', 'pcat')
            ->leftJoin('pc.ClassCategory1', 'cc1')
            ->where('pcat.category_id = :saiji_id')
            ->andWhere('pc.ClassCategory1 is null')
            ->setParameter('saiji_id', $saijiId)
            ->orderBy('pc.code');
        */
        $qb = $this->createQueryBuilder('p');
        $qb->select(['pc.code', 'p.name'])
            ->addSelect('bumon.id as bumon_id')
            ->addSelect('bumon.name as bumon_name')
            ->innerJoin('p.ProductClasses', 'pc')
            ->innerJoin('p.ProductCategories', 'pcat')
            ->leftJoin('pc.ClassCategory1', 'cc1')
            ->leftJoin('p.Bumon', 'bumon')
            ->where('pcat.category_id = :saiji_id')
            ->andWhere('pc.visible = :visible')
            ->setParameter('saiji_id', $saijiId)
            ->setParameter('visible', true)
            ->groupBy('pc.code')
            ->addGroupBy('p.name')
            ->addGroupBy('bumon.id')
            ->addGroupBy('bumon.name')
            ->orderBy('p.name');
        if ( $tenpoId ) {
            $qb->andWhere('pc.ClassCategory1 is null or pc.ClassCategory1 = :tenpo_id')
            ->setParameter('tenpo_id', $tenpoId);
        }

        $products = $qb
            ->getQuery()
            ->useResultCache(true, $this->eccubeConfig['eccube_result_cache_lifetime_short'])
            ->getResult();

        return $products;
    }
    /**
     * get query builder.
     *
     * @param  array $searchData
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getQueryBuilderBySearchData($searchData)
    {

        $qb = $this->createQueryBuilder('p')
            ->andWhere('p.Status = 1');

        /* session */
        $session = new Session();
        //$session->start();
        //$session = $this->get('session');
        log_info("getQueryBuilderBySearchData saiji_id=".$session->get('saiji_id'));
        // saiji_id
        if ( $session->get('saiji_id') ) {
            $qb
            ->innerJoin('p.ProductCategories', 'pcate')
            ->andWhere('pcate.category_id = :saiji_id')
            ->setParameter('saiji_id', $session->get('saiji_id'));
        }

        log_info("getQueryBuilderBySearchData tenpo_id=".$session->get('tenpo_id'));
        // tenpo_id
        if ( $session->get('tenpo_id') ) {
            $qb
            ->innerJoin('p.ProductClasses', 'pclass')
            ->andWhere('pclass.ClassCategory1 is null OR pclass.ClassCategory1 = :tenpo_id')
            ->andWhere('pclass.visible = :visible')
            ->setParameter('tenpo_id', $session->get('tenpo_id'))
            ->setParameter('visible', true);
        }

        // category
        $categoryJoin = false;
        if (!empty($searchData['category_id']) && $searchData['category_id']) {
            $Categories = $searchData['category_id']->getSelfAndDescendants();
            if ($Categories) {
                $qb
                    ->innerJoin('p.ProductCategories', 'pct')
                    ->innerJoin('pct.Category', 'c')
                    ->andWhere($qb->expr()->in('pct.Category', ':Categories'))
                    ->setParameter('Categories', $Categories);
                $categoryJoin = true;
            }
        }

        // name
        if (isset($searchData['name']) && StringUtil::isNotBlank($searchData['name'])) {
            $keywords = preg_split('/[\s　]+/u', str_replace(['%', '_'], ['\\%', '\\_'], $searchData['name']), -1, PREG_SPLIT_NO_EMPTY);

            foreach ($keywords as $index => $keyword) {
                $key = sprintf('keyword%s', $index);
                $qb
                    ->andWhere(sprintf('NORMALIZE(p.name) LIKE NORMALIZE(:%s) OR
                        NORMALIZE(p.search_word) LIKE NORMALIZE(:%s) OR
                        EXISTS (SELECT wpc%d FROM \Eccube\Entity\ProductClass wpc%d WHERE p = wpc%d.Product AND NORMALIZE(wpc%d.code) LIKE NORMALIZE(:%s))',
                        $key, $key, $index, $index, $index, $index, $key))
                    ->setParameter($key, '%'.$keyword.'%');
            }
        }

        // Order By
        // 価格低い順
        $config = $this->eccubeConfig;
        if (!empty($searchData['orderby']) && $searchData['orderby']->getId() == $config['eccube_product_order_price_lower']) {
            //@see http://doctrine-orm.readthedocs.org/en/latest/reference/dql-doctrine-query-language.html
            $qb->addSelect('MIN(pc.price02) as HIDDEN price02_min');
            $qb->innerJoin('p.ProductClasses', 'pc');
            $qb->andWhere('pc.visible = true');
            $qb->groupBy('p.id');
            $qb->orderBy('price02_min', 'ASC');
            $qb->addOrderBy('p.id', 'DESC');
            log_info("getQueryBuilderBySearchData price_lower orderby=".$searchData['orderby']);
        // 価格高い順
        } elseif (!empty($searchData['orderby']) && $searchData['orderby']->getId() == $config['eccube_product_order_price_higher']) {
            $qb->addSelect('MAX(pc.price02) as HIDDEN price02_max');
            $qb->innerJoin('p.ProductClasses', 'pc');
            $qb->andWhere('pc.visible = true');
            $qb->groupBy('p.id');
            $qb->orderBy('price02_max', 'DESC');
            $qb->addOrderBy('p.id', 'DESC');
            log_info("getQueryBuilderBySearchData price_higher orderby=".$searchData['orderby']);
        // 新着順
        } elseif (!empty($searchData['orderby']) && $searchData['orderby']->getId() == $config['eccube_product_order_newer']) {
            // 在庫切れ商品非表示の設定が有効時対応
            // @see https://github.com/EC-CUBE/ec-cube/issues/1998
            if ($this->getEntityManager()->getFilters()->isEnabled('option_nostock_hidden') == true) {
                $qb->innerJoin('p.ProductClasses', 'pc');
                $qb->andWhere('pc.visible = true');
            }
            $qb->orderBy('p.create_date', 'DESC');
            $qb->addOrderBy('p.id', 'DESC');
            log_info("getQueryBuilderBySearchData newer orderby=".$searchData['orderby']);
        // (HDN) 品名順を追加
        } elseif (!empty($searchData['orderby']) && $searchData['orderby']->getId() == $config['eccube_product_order_name']) {
            // 在庫切れ商品非表示の設定が有効時対応
            // @see https://github.com/EC-CUBE/ec-cube/issues/1998
            if ($this->getEntityManager()->getFilters()->isEnabled('option_nostock_hidden') == true) {
                $qb->innerJoin('p.ProductClasses', 'pc');
                $qb->andWhere('pc.visible = true');
            }
            $qb->orderBy('p.name', 'ASC');
            $qb->addOrderBy('p.update_date', 'DESC');
            log_info("getQueryBuilderBySearchData name orderby=".$searchData['orderby']);
        } else {
            if ($categoryJoin === false) {
                $qb
                    ->leftJoin('p.ProductCategories', 'pct')
                    ->leftJoin('pct.Category', 'c');
            }
            $qb
                ->addOrderBy('p.id', 'DESC');
            log_info("getQueryBuilderBySearchData no orderby");
        }

        return $this->queries->customize(QueryKey::PRODUCT_SEARCH, $qb, $searchData);
    }

}
