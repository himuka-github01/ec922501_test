<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

//namespace Eccube\Repository;
namespace Customize\Repository;

use Customize\Entity\HdnTenpo; // (HDN)

use Doctrine\ORM\NoResultException;
use Doctrine\ORM\QueryBuilder;
use Eccube\Doctrine\Query\Queries;
use Eccube\Entity\Category; // (HDN)
use Eccube\Entity\Customer;
use Eccube\Entity\Master\OrderStatus;
use Eccube\Entity\Order;
use Eccube\Entity\Product; // (HDN)
use Eccube\Entity\Shipping;
use Eccube\Repository\OrderRepository as BaseOrderRepository;   // これを忘れないこと
use Eccube\Repository\AbstractRepository;   // これを忘れないこと
use Eccube\Repository\QueryKey;
use Eccube\Util\StringUtil;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends BaseOrderRepository
{
    /**
     * @param  array        $searchData
     *
     * @return QueryBuilder
     */
    public function getQueryBuilderBySearchDataForAdmin($searchData)
    {
        $qb = $this->createQueryBuilder('o')
            ->select('o, s')
            ->addSelect('oi', 'pref')
            ->leftJoin('o.OrderItems', 'oi')
            ->leftJoin('o.Pref', 'pref')
            ->innerJoin('o.Shippings', 's');

        // order_id_start
        if (isset($searchData['order_id']) && StringUtil::isNotBlank($searchData['order_id'])) {
            $qb
                ->andWhere('o.id = :order_id')
                ->setParameter('order_id', $searchData['order_id']);
        }

        // order_no
        if (isset($searchData['order_no']) && StringUtil::isNotBlank($searchData['order_no'])) {
            $qb
                ->andWhere('o.order_no = :order_no')
                ->setParameter('order_no', $searchData['order_no']);
        }

        // order_id_start
        if (isset($searchData['order_id_start']) && StringUtil::isNotBlank($searchData['order_id_start'])) {
            $qb
                ->andWhere('o.id >= :order_id_start')
                ->setParameter('order_id_start', $searchData['order_id_start']);
        }
        // multi
        if (isset($searchData['multi']) && StringUtil::isNotBlank($searchData['multi'])) {
            //スペース除去
            $clean_key_multi = preg_replace('/\s+|[　]+/u', '', $searchData['multi']);
            $multi = preg_match('/^\d{0,10}$/', $clean_key_multi) ? $clean_key_multi : null;
            if ($multi && $multi > '2147483647' && $this->isPostgreSQL()) {
                $multi = null;
            }
            // (HDN) message エリアを検索対象に追加
            $qb
                ->andWhere('o.id = :multi OR CONCAT(o.name01, o.name02) LIKE :likemulti OR '.
                            'CONCAT(o.kana01, o.kana02) LIKE :likemulti OR o.company_name LIKE :company_name OR '.
                            'o.message LIKE :likemulti OR '.
                            'o.order_no LIKE :likemulti OR o.email LIKE :likemulti OR o.phone_number LIKE :likemulti OR o.shoukai_name LIKE :likemulti OR o.uketsuke_name LIKE :likemulti')
                ->setParameter('multi', $multi)
                ->setParameter('likemulti', '%'.$clean_key_multi.'%')
                ->setParameter('company_name', '%'.$searchData['multi'].'%'); // 会社名はスペースを除去せず検索
        }

        // order_id_end
        if (isset($searchData['order_id_end']) && StringUtil::isNotBlank($searchData['order_id_end'])) {
            $qb
                ->andWhere('o.id <= :order_id_end')
                ->setParameter('order_id_end', $searchData['order_id_end']);
        }

        // status
        $filterStatus = false;
        if (!empty($searchData['status']) && count($searchData['status'])) {
            $qb
                ->andWhere($qb->expr()->in('o.OrderStatus', ':status'))
                ->setParameter('status', $searchData['status']);
            $filterStatus = true;
        }

        if (!$filterStatus) {
            // 購入処理中, 決済処理中は検索対象から除外
            $qb->andWhere($qb->expr()->notIn('o.OrderStatus', ':status'))
                ->setParameter('status', [OrderStatus::PROCESSING, OrderStatus::PENDING]);
        }

        // company_name
        if (isset($searchData['company_name']) && StringUtil::isNotBlank($searchData['company_name'])) {
            $qb
                ->andWhere('o.company_name LIKE :company_name')
                ->setParameter('company_name', '%'.$searchData['company_name'].'%');
        }

        // name
        if (isset($searchData['name']) && StringUtil::isNotBlank($searchData['name'])) {
            $clean_name = preg_replace('/\s+|[　]+/u', '', $searchData['name']);
            $qb
                ->andWhere('CONCAT(o.name01, o.name02) LIKE :name')
                ->setParameter('name', '%'.$clean_name.'%');
        }

        // kana
        if (isset($searchData['kana']) && StringUtil::isNotBlank($searchData['kana'])) {
            $clean_kana = preg_replace('/\s+|[　]+/u', '', $searchData['kana']);
            $qb
                ->andWhere('CONCAT(o.kana01, o.kana02) LIKE :kana')
                ->setParameter('kana', '%'.$clean_kana.'%');
        }

        // email
        if (isset($searchData['email']) && StringUtil::isNotBlank($searchData['email'])) {
            $qb
                ->andWhere('o.email like :email')
                ->setParameter('email', '%'.$searchData['email'].'%');
        }

        // tel
        if (isset($searchData['phone_number']) && StringUtil::isNotBlank($searchData['phone_number'])) {
            $tel = preg_replace('/[^0-9]/ ', '', $searchData['phone_number']);
            $qb
                ->andWhere('o.phone_number LIKE :phone_number')
                ->setParameter('phone_number', '%'.$tel.'%');
        }

        // sex
        if (!empty($searchData['sex']) && count($searchData['sex']) > 0) {
            $qb
                ->andWhere($qb->expr()->in('o.Sex', ':sex'))
                ->setParameter('sex', $searchData['sex']->toArray());
        }

        // payment
        if (!empty($searchData['payment']) && count($searchData['payment'])) {
            $payments = [];
            foreach ($searchData['payment'] as $payment) {
                $payments[] = $payment->getId();
            }
            $qb
                ->leftJoin('o.Payment', 'p')
                ->andWhere($qb->expr()->in('p.id', ':payments'))
                ->setParameter('payments', $payments);
        }

        // oreder_date
        if (!empty($searchData['order_datetime_start']) && $searchData['order_datetime_start']) {
            $date = $searchData['order_datetime_start'];
            $qb
                ->andWhere('o.order_date >= :order_date_start')
                ->setParameter('order_date_start', $date);
        } elseif (!empty($searchData['order_date_start']) && $searchData['order_date_start']) {
            $date = $searchData['order_date_start'];
            $qb
                ->andWhere('o.order_date >= :order_date_start')
                ->setParameter('order_date_start', $date);
        }

        if (!empty($searchData['order_datetime_end']) && $searchData['order_datetime_end']) {
            $date = $searchData['order_datetime_end'];
            $qb
                ->andWhere('o.order_date < :order_date_end')
                ->setParameter('order_date_end', $date);
        } elseif (!empty($searchData['order_date_end']) && $searchData['order_date_end']) {
            $date = clone $searchData['order_date_end'];
            $date = $date
                ->modify('+1 days');
            $qb
                ->andWhere('o.order_date < :order_date_end')
                ->setParameter('order_date_end', $date);
        }

        // payment_date
        if (!empty($searchData['payment_datetime_start']) && $searchData['payment_datetime_start']) {
            $date = $searchData['payment_datetime_start'];
            $qb
                ->andWhere('o.payment_date >= :payment_date_start')
                ->setParameter('payment_date_start', $date);
        } elseif (!empty($searchData['payment_date_start']) && $searchData['payment_date_start']) {
            $date = $searchData['payment_date_start'];
            $qb
                ->andWhere('o.payment_date >= :payment_date_start')
                ->setParameter('payment_date_start', $date);
        }

        if (!empty($searchData['payment_datetime_end']) && $searchData['payment_datetime_end']) {
            $date = $searchData['payment_datetime_end'];
            $qb
                ->andWhere('o.payment_date < :payment_date_end')
                ->setParameter('payment_date_end', $date);
        } elseif (!empty($searchData['payment_date_end']) && $searchData['payment_date_end']) {
            $date = clone $searchData['payment_date_end'];
            $date = $date
                ->modify('+1 days');
            $qb
                ->andWhere('o.payment_date < :payment_date_end')
                ->setParameter('payment_date_end', $date);
        }

        // update_date
        if (!empty($searchData['update_datetime_start']) && $searchData['update_datetime_start']) {
            $date = $searchData['update_datetime_start'];
            $qb
                ->andWhere('o.update_date >= :update_date_start')
                ->setParameter('update_date_start', $date);
        } elseif (!empty($searchData['update_date_start']) && $searchData['update_date_start']) {
            $date = $searchData['update_date_start'];
            $qb
                ->andWhere('o.update_date >= :update_date_start')
                ->setParameter('update_date_start', $date);
        }

        if (!empty($searchData['update_datetime_end']) && $searchData['update_datetime_end']) {
            $date = $searchData['update_datetime_end'];
            $qb
                ->andWhere('o.update_date < :update_date_end')
                ->setParameter('update_date_end', $date);
        } elseif (!empty($searchData['update_date_end']) && $searchData['update_date_end']) {
            $date = clone $searchData['update_date_end'];
            $date = $date
                ->modify('+1 days');
            $qb
                ->andWhere('o.update_date < :update_date_end')
                ->setParameter('update_date_end', $date);
        }

        // payment_total
        if (isset($searchData['payment_total_start']) && StringUtil::isNotBlank($searchData['payment_total_start'])) {
            $qb
                ->andWhere('o.payment_total >= :payment_total_start')
                ->setParameter('payment_total_start', $searchData['payment_total_start']);
        }
        if (isset($searchData['payment_total_end']) && StringUtil::isNotBlank($searchData['payment_total_end'])) {
            $qb
                ->andWhere('o.payment_total <= :payment_total_end')
                ->setParameter('payment_total_end', $searchData['payment_total_end']);
        }

        // buy_product_name
        if (isset($searchData['buy_product_name']) && StringUtil::isNotBlank($searchData['buy_product_name'])) {
            $qb
                ->andWhere('oi.product_name LIKE :buy_product_name')
                ->setParameter('buy_product_name', '%'.$searchData['buy_product_name'].'%');
        }

        // 発送メール送信/未送信.
        if (isset($searchData['shipping_mail']) && $count = count($searchData['shipping_mail'])) {
            // 送信済/未送信両方にチェックされている場合は検索条件に追加しない
            if ($count < 2) {
                $checked = current($searchData['shipping_mail']);
                if ($checked == Shipping::SHIPPING_MAIL_UNSENT) {
                    // 未送信
                    $qb
                        ->andWhere('s.mail_send_date IS NULL');
                } elseif ($checked == Shipping::SHIPPING_MAIL_SENT) {
                    // 送信
                    $qb
                        ->andWhere('s.mail_send_date IS NOT NULL');
                }
            }
        }

        // 送り状番号.
        if (!empty($searchData['tracking_number'])) {
            $qb
                ->andWhere('s.tracking_number = :tracking_number')
                ->setParameter('tracking_number', $searchData['tracking_number']);
        }

        // お届け予定日(Shipping.delivery_date)
        if (!empty($searchData['shipping_delivery_datetime_start']) && $searchData['shipping_delivery_datetime_start']) {
            $date = $searchData['shipping_delivery_datetime_start'];
            $qb
                ->andWhere('s.shipping_delivery_date >= :shipping_delivery_date_start')
                ->setParameter('shipping_delivery_date_start', $date);
        } elseif (!empty($searchData['shipping_delivery_date_start']) && $searchData['shipping_delivery_date_start']) {
            $date = $searchData['shipping_delivery_date_start'];
            $qb
                ->andWhere('s.shipping_delivery_date >= :shipping_delivery_date_start')
                ->setParameter('shipping_delivery_date_start', $date);
        }

        if (!empty($searchData['shipping_delivery_datetime_end']) && $searchData['shipping_delivery_datetime_end']) {
            $date = $searchData['shipping_delivery_datetime_end'];
            $qb
                ->andWhere('s.shipping_delivery_date < :shipping_delivery_date_end')
                ->setParameter('shipping_delivery_date_end', $date);
        } elseif (!empty($searchData['shipping_delivery_date_end']) && $searchData['shipping_delivery_date_end']) {
            $date = clone $searchData['shipping_delivery_date_end'];
            $date = $date
                ->modify('+1 days');
            $qb
                ->andWhere('s.shipping_delivery_date < :shipping_delivery_date_end')
                ->setParameter('shipping_delivery_date_end', $date);
        }

        // Order By
        $qb->orderBy('o.update_date', 'DESC');
        $qb->addorderBy('o.id', 'DESC');

        return $this->queries->customize(QueryKey::ORDER_SEARCH_ADMIN, $qb, $searchData);
    }
    /**
     * (HDN) 商品別に日別の受注数と在庫情報を収集する
     *
     * @param int $saiji_id
     * @param int $tenpo_id
     * @param array $product_ids[]
     *
     * @return array
     */
    public function getStockAndOrderInfo(int $saiji_id, int $tenpo_id, $ids, $entityManager)
    {
        log_info('[OrderRepository]催事ID='.$saiji_id.' 店舗ID='.$tenpo_id);
        //-------------------------------------------
        // (HDN) 2022.05.13 受渡日ごとの在庫状況を取得
        // 1) 催事を取得し受渡日のリストを作成 $shippingDates[]
        // 2) 商品毎(店舗)の受渡日別受注数を取得 $sumOrdersByTenpo
        // 3) 商品毎(全店)の受渡日別受注数を取得 $sumOrdersAllTenpo
        // 4) 商品毎の受渡日別受注状況をセット $infoByProductAndDate[]
        //-------------------------------------------
        // 1) 催事を取得し受渡日のリストを作成 $shippingDates[]
        $shippingDates = [];
        // 1)-1 催事を取得
        //$categoryRepository = $this->entityManager->getRepository(Category::class);
        $categoryRepository = $entityManager->getRepository(Category::class);
        $saiji = $categoryRepository->find($saiji_id);
        
        // 1)-2 受渡開始日と受渡終了日から受渡日のリストを作成
        $deliveryStartDt = $saiji->getDeliveryStartDt();
        //　(HDN) 2023.07.xx 通年イベントに対応
        if ($saiji->getDeliveryEndDt()) {
            // ※HDN)イミュータブルにしないとmodify等によってEntity値自体が変化してしまう
            //$deliveryEndDt = $saiji->getDeliveryEndDt();
            $deliveryEndDt = \DateTimeImmutable::createFromMutable($saiji->getDeliveryEndDt());
        }
        if ($deliveryStartDt && $deliveryEndDt) {
            log_info('[OrderRepository]催事の受渡期間(登録内容) 開始='.$deliveryStartDt->format('Y-m-d').' 終了='.$deliveryEndDt->format('Y-m-d'));
            $period = new \DatePeriod(
                $deliveryStartDt, new \DateInterval('P1D'), $deliveryEndDt->modify('+1 days')
            );
            foreach ($period as $day) {
                $shippingDates[] = $day->format('Y-m-d');
            }    
        }
        log_info('[OrderRepository]受渡日群：',$shippingDates);

        // 受渡日が単日の場合は対象外
        if ( count($shippingDates) > 1 ) {
            // 2) 商品毎(店舗)の受渡日別受注数を取得 $sumOrdersByTenpo
            // 2)-1 店舗を取得
            //$hdnTenpoRepository = $this->entityManager->getRepository(HdnTenpo::class);
            $hdnTenpoRepository = $entityManager->getRepository(HdnTenpo::class);
            $tenpo = $hdnTenpoRepository->find($tenpo_id);

            // 2)-2 催事/店舗を条件に商品/受渡日毎の実績を取得(SQL生成)
            //$orderRepository = $this->entityManager->getRepository(Order::class);
            $qb = $this->createQueryBuilder('o')
                ->select('sj.id as saiji_id')
                ->addSelect('tp.id as tenpo_id')
                ->addSelect('p.id as product_id')
                ->addSelect('s.shipping_delivery_date')
                ->addSelect('sum(oi.quantity) as quantity')
                ->leftJoin('o.OrderItems', 'oi')
                ->leftJoin('oi.Product', 'p')
                ->leftJoin('oi.Shipping', 's')
                ->leftJoin('o.Saiji', 'sj')
                ->leftJoin('o.Tenpo', 'tp')
                ->where('o.Saiji = :Saiji')
                ->andwhere('o.Tenpo = :Tenpo')
                ->andWhere('o.OrderStatus not in (3,8)')
                ->andWhere('oi.class_name1 is not null')
                ->groupBy('saiji_id')
                ->addGroupBy('tenpo_id')
                ->addGroupBy('product_id')
                ->addGroupBy('s.shipping_delivery_date')
                ->orderBy('product_id')
                ->addOrderBy('s.shipping_delivery_date');
            $qb->andwhere($qb->expr()->in('p.id', $ids));
            $qb->setParameter('Saiji', $saiji)
                ->setParameter('Tenpo', $tenpo);

            // 2)-3 実績取得(SQL実行)
            $sumOrdersByTenpo = $qb->getQuery()->execute();
            log_info('[OrderRepository]受注実績(店舗):',$sumOrdersByTenpo);

            // 2)-4 商品毎受渡日別受注状況をワーク配列にセット
            $wOrders = [];
            foreach ($sumOrdersByTenpo as $sumOrder) {
                $wDate = $sumOrder['shipping_delivery_date']->format('Y-m-d');
                $wOrders[$sumOrder['product_id']][$wDate] = $sumOrder['quantity'];
            }
            
            // 3) 商品毎(全店)の受渡日別受注数を取得 $sumOrdersAllTenpo
            // 3)-1 催事を条件に商品/受渡日毎の実績を取得(SQL生成)
            $qb = $this->createQueryBuilder('o')
                ->select('sj.id as saiji_id')
                //->addSelect('tp.id as tenpo_id')
                ->addSelect('p.id as product_id')
                ->addSelect('s.shipping_delivery_date')
                ->addSelect('sum(oi.quantity) as quantity')
                ->leftJoin('o.OrderItems', 'oi')
                ->leftJoin('oi.Product', 'p')
                ->leftJoin('oi.Shipping', 's')
                ->leftJoin('o.Saiji', 'sj')
                //->leftJoin('o.Tenpo', 'tp')
                ->where('o.Saiji = :Saiji')
                //->andwhere('o.Tenpo = :Tenpo')
                ->andwhere($qb->expr()->in('p.id', $ids))
                ->andWhere('o.OrderStatus not in (3,8)')
                ->andWhere('oi.class_name1 is null')
                ->groupBy('saiji_id')
                //->addGroupBy('tenpo_id')
                ->addGroupBy('product_id')
                ->addGroupBy('s.shipping_delivery_date')
                ->orderBy('product_id')
                ->addOrderBy('s.shipping_delivery_date');
            $qb->setParameter('Saiji', $saiji);
                //->setParameter('Tenpo', $tenpo);

            // 3)-2 実績取得(SQL実行)
            $sumOrdersAllTenpo = $qb->getQuery()->execute();
            log_info('[OrderRepository]受注実績(全店):',$sumOrdersAllTenpo);

            // 3)-3 商品毎受渡日別受注状況をワーク配列にセット
            foreach ($sumOrdersAllTenpo as $sumOrder) {
                $wDate = $sumOrder['shipping_delivery_date']->format('Y-m-d');
                $wOrders[$sumOrder['product_id']][$wDate] = $sumOrder['quantity'];
            }
        }

        // 4) 商品毎の受渡日別受注状況をセット $infoByProductAndDate[]
        $infoByProductAndDate = [];
        // 4)-1 商品毎日毎に受注数/日別上限/日別残数を初期化&設定
        $productRepository = $entityManager->getRepository(Product::class);
        foreach ($ids as $id) {
            //$id = $Product->getId();
            // 条件が揃っていなければ、日別残数は管理しない
            $infoByProductAndDate[$id] = false;
            // 受渡日が単日の場合は対象外
            if ( count($shippingDates) <= 1 ) { continue; }
            // Productを取得
            $Product = $productRepository->find($id);
            // 商品が在庫無制限の場合は対象外
            if ( $Product->getStockUnlimitedMin() ) { continue; }
            // 商品に日別上限の設定がなければ対象外
            $oneDayLimit = $Product->getTenpoOneDayLimit($tenpo_id);
            log_info('[OrderRepository]日別上限 ID:'.$id.' 店舗:'.$tenpo_id.' limit:'.$oneDayLimit);
            if ( is_null($oneDayLimit) || $oneDayLimit <= 0 ) { continue; }

            // 条件が揃っている場合、商品毎の受渡日別受注状況をセット
            $infoByProductAndDate[$id] = [];
            // 総在庫数をセット
            $infoByProductAndDate[$id]['stock'] = $Product->getTenpoStock($tenpo_id);
            log_info('[OrderRepository]総在庫数 ID:'.$id.' stock:'.$infoByProductAndDate[$id]['stock']);
            $infoByProductAndDate[$id]['disp_simple'] = '上限 ';
            // 日別受注状況を初期化
            foreach ($shippingDates as $day) {
                $infoByProductAndDate[$id][$day]['date'] = $day;
                $infoByProductAndDate[$id][$day]['limit'] = $oneDayLimit;
                $infoByProductAndDate[$id][$day]['quantity'] = 0;
                $infoByProductAndDate[$id][$day]['stock'] = $oneDayLimit;
                // 受注数と残数をセット
                if ( isset($wOrders[$id]) && isset($wOrders[$id][$day]) ) {
                    $infoByProductAndDate[$id][$day]['quantity'] = $wOrders[$id][$day];
                    $infoByProductAndDate[$id][$day]['stock']
                     = $infoByProductAndDate[$id][$day]['limit'] - $wOrders[$id][$day];
                }
                // 総在庫数が、1日上限からの計算在庫数を下回っている場合は、そちらを在庫数とする
                if ( $infoByProductAndDate[$id][$day]['stock'] > $infoByProductAndDate[$id]['stock'] ) {
                    $infoByProductAndDate[$id][$day]['stock'] = $infoByProductAndDate[$id]['stock'];
                }
                // 簡易表示(disp_simple)編集（詳細な表示が必要な場合は別途行う）
                $wInfo = $infoByProductAndDate[$id][$day];
                $wDispSimple  = str_replace('-','/',mb_substr($wInfo['date'],8)).'日';
                if ( $wInfo['stock'] > 0 ) {
                    $wDispSimple .= '('.$wInfo['stock'].')';
                } else {
                    $wDispSimple .= '(X)';
                }
                $infoByProductAndDate[$id]['disp_simple'] .= $wDispSimple;
            }    
        }
        log_info('[OrderRepository]日別受注状況:',$infoByProductAndDate);

        return $infoByProductAndDate;
    }

}
